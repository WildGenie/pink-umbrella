@model ReactViewModel
@{
    var actionPrefix = Model.HasReacted ? "Un" : "";
    var containerClass = Model.Enabled && Model.ViewerId.HasValue ? "contains-ajax" : "";
}
<div class="@containerClass" title="@actionPrefix@Model.Type">
    @if (Model.ViewerId.HasValue)
    {
        if (!string.IsNullOrWhiteSpace(Model.ManualReactionUrl))
        {
            <a class="ajax" href="@Model.ManualReactionUrl" data-response-type="html" data-response-handler="@Model.ResponseHandler" data-response-on-closest="@Model.DataResponseOnClosest"></a>
        }
        else
        {
            <a class="ajax" asp-action="@actionPrefix@Model.Type" asp-controller="Reaction" asp-route-id="@Model.ToId" asp-route-undo="@Model.UndoId" data-response-type="html" data-response-handler="@Model.ResponseHandler"></a>
        }
    }
    @if (Model.HasReacted)
    {
        switch (Model.Type)
        {
            case ReactionType.Like:
            <i class="fas fa-thumbs-up"></i>
            break;
            case ReactionType.Dislike:
            <i class="fas fa-thumbs-down"></i>
            break;
            case ReactionType.Upvote:
            <i class="fas fa-arrow-alt-circle-up"></i>
            break;
            case ReactionType.Downvote:
            <i class="fas fa-arrow-alt-circle-down"></i>
            break;
            case ReactionType.Follow:
            <i class="fas fa-bell"></i>
            break;
        }
    }
    else
    {
        switch (Model.Type)
        {
            case ReactionType.Like:
            <i class="far fa-thumbs-up"></i>
            break;
            case ReactionType.Dislike:
            <i class="far fa-thumbs-down"></i>
            break;
            case ReactionType.Ignore:
            <i class="fas fa-eraser"></i>
            break;
            case ReactionType.Block:
            <i class="fas fa-ban"></i>
            break;
            case ReactionType.Report:
            <i class="far fa-flag"></i>
            break;
            case ReactionType.Follow:
            <i class="far fa-bell"></i>
            break;
            case ReactionType.Upvote:
            <i class="far fa-arrow-alt-circle-up"></i>
            break;
            case ReactionType.Downvote:
            <i class="far fa-arrow-alt-circle-down"></i>
            break;
        }
    }
    <span>@_strings.CountRound(Model.Count)</span>
</div>