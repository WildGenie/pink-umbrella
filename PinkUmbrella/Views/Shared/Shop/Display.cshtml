@using Estuary.Core
@model Estuary.Core.BaseObject
@{
    Link[] links = null;
    if (Model.url.type == "Link")
    {
        links = new Link[] { Model.url as Link };
    }
    else if (Model.url.type.EndsWith("Collection"))
    {
        links = (Model.url as Estuary.Core.CollectionObject).items.OfType<Link>().ToArray();
    }
    var hasLinks = links != null && links.Length > 0;

    var reactLike = new ReactViewModel() {
        Type = ReactionType.Like,
        ToId = Model.PublicId,
        HasReacted = Model.HasLiked,
        Count = Model.LikeCount,
        ViewerId = Model.ViewerId,
        Enabled = !Model.ViewerIsPublisher,
    };
    var reactDislike = new ReactViewModel() {
        Type = ReactionType.Dislike,
        ToId = Model.PublicId,
        HasReacted = Model.HasDisliked,
        Count = Model.DislikeCount,
        ViewerId = Model.ViewerId,
        Enabled = !Model.ViewerIsPublisher,
    };
    var reactReport = new ReactViewModel() {
        Type = ReactionType.Report,
        ToId = Model.PublicId,
        HasReacted = false,
        Count = Model.ReportCount,
        ViewerId = Model.ViewerId,
        Enabled = !Model.ViewerIsPublisher,
        ManualReactionUrl = "/Post/Report/" + Model.PublicId,
        ResponseHandler = "post-replacewith",
    };

    var reactions = new List<ReactViewModel>() {
        reactLike, reactDislike, reactReport,
    };

    var locationString = $"{Model.location}, {_settings.Site.HostDisplayName}";

    var tags = new TagEditorViewModel() { Tags = Model.tag };
    var travelModes = new string [] { "driving", "transit", "bicycling", "walking" };
    var travelIcons = new Dictionary<string, string>() {
        { "driving", "fas fa-car" },
        { "transit", "fas fa-bus" },
        { "bicycling", "fas fa-biking" },
        { "walking", "fas fa-walking" }
    };
}
<partial name="_VisibilityStatus" />
<small>Last updated <partial name="_Timestamp" model="Model.updated" /> - published <partial name="_Timestamp" model="Model.published" /></small>
<p>
    Managed by 
    <a asp-controller="Person" asp-action="Index" asp-route-id="@Model.UserId">Model.publisher.name</a>
</p>
<ul>
    <li><a href="https://www.google.com/maps/search/?api=1&query=@Uri.EscapeDataString(locationString)" target="_blank"><i class="fas fa-map-marker-alt"></i> @locationString</a></li>
    @foreach (var travelMode in travelModes)
    {
        <li><a href="https://www.google.com/maps/dir/?api=1&travelmode=@travelMode&destination=@Uri.EscapeDataString(locationString)" target="_blank"><i class="@travelIcons[travelMode]"></i> Directions for @travelMode</a></li>
    }
</ul>
@if (hasLinks)
{
    var websiteLink = links[0].content;
    var menuLink = string.Empty;
    if (links.Length > 1)
    {
        websiteLink = links.FirstOrDefault(l => l.name == "website")?.content ?? websiteLink;
        menuLink = links.FirstOrDefault(l => l.name == "menu")?.content;
    }
    var hasWebsiteLink = string.IsNullOrWhiteSpace(websiteLink);
    var hasMenuLink = string.IsNullOrWhiteSpace(menuLink);
    <ul>
        @if (hasWebsiteLink)
        {
        <li><a href="@websiteLink" target="_blank"><i class="fas fa-external-link-alt"></i> Website</a></li>
        }
        @if (hasMenuLink)
        {
        <li><a href="@menuLink" target="_blank"><i class="fas fa-book-open"></i> Menu</a></li>
        }
    </ul>
}
<p>@Model.summary</p>
<partial name="Button/ReactButtonList" model="reactions" />
<partial name="Tag/Display" model="tags" />