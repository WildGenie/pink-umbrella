@using seattle.Services;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model seattle.ViewModels.Home.IndexViewModel
@{
    ViewData["Title"] = SignInManager.IsSignedIn(User) ? "Google Account" : "Signing with Google";
}

@if (SignInManager.IsSignedIn(User))
{
    <div class="text-center">
        <h1>@ViewData["Title"]</h1>

    </div>
}
else
{
    <div class="text-center">
        <h1>@ViewData["Title"]</h1>
        <div class="g-signin2" data-onsuccess="onSignIn"></div>
    </div>
}

@section Scripts {
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <meta name="google-signin-client_id" content="1085064983480-43ovvgsoan1ogjg26t5gvspdj13u0abm.apps.googleusercontent.com">
    <script>
        function onSignIn(googleUser) {
            var profile = googleUser.getBasicProfile();
            console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.
            console.log('Name: ' + profile.getName());
            console.log('Image URL: ' + profile.getImageUrl());
            console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.
            
            var id_token = googleUser.getAuthResponse().id_token;
        }
        function signOut() {
            var auth2 = gapi.auth2.getAuthInstance();
            auth2.signOut().then(function () {
                console.log('User signed out.');
            });
        }
    </script>
}